#
#  change_scale.py
#
#  Replaces scale (pixel width) in coordinate files generated by Synapse.py,
#  PointDensity.py or similar tools.
#
#  Max Larsson <max.larsson@liu.se>
#

__date__  = "December 10, 2014"

import glob
import optparse
import os.path
import sys


def getfiles(args):
    def addfiles(fli, path, dirfiles):
        for f in dirfiles:
            fli.append(os.path.join(path, f))

    fli = []
    for f in args:
        fli.extend(glob.glob(f))
    for f in fli:
        if os.path.isdir(f):
            os.path.walk(f, addfiles, fli)
    for f in fli:
        if not os.path.isfile(f):
            fli.remove(f)
    return fli

def getoptions():
    p = optparse.OptionParser()
    p.usage = '%prog [options] files'
    p.add_option("-o", "--oldscale", action="store", type="string",
                 dest="old_pixel_width", help="Old scale to replace, including"
                                              " unit (e.g., '1.10 nm'). "
                                              "Default is '1.00'.")
    p.add_option("-n", "--newscale", action="store", type="string",
                 dest="new_pixel_width", help="New scale to replace with, "
                                              "including unit (e.g., "
                                              "'1.10 nm'). ")

    p.add_option("-a", "--all", action="store_true", dest="allfiles",
                 help="Replace the scale in all input files regardless of old "
                      "scale. The '--oldscale' option is disregarded if this "
                      "option is set." )
    p.set_defaults(old_pixel_width="1.00", new_pixel_width="", allfiles=False)
    return p.parse_args()


def process(fn, opt):
    sys.stdout.write("Checking %s: " % fn)
    scale_changed = False
    try:
        f = open(fn, 'r+')
        s = f.readlines()
    except IOError:
        sys.stdout.write("Error: could not read %s\n" % fn)
        return
    finally:
        f.close()
    for i, e in enumerate(s):
        if e.split(" ")[0] == "PIXELWIDTH":
            if (opt.allfiles or
                e.split(" ", 1)[1].strip() == opt.old_pixel_width):
                s[i] = "PIXELWIDTH %s\n" % opt.new_pixel_width
                scale_changed = True
                break
    if scale_changed:
        try:
            f = open(fn, "w")
            f.writelines(s)
        except IOError:
            sys.stdout.write("Error: could not write to %s\n" % fn)
            return
        finally:
            f.close()
        sys.stdout.write("Scale changed.\n")
    else:
        sys.stdout.write("Scale not changed.\n")


# main
opt, args = getoptions()
if opt.new_pixel_width == "":
    sys.stdout.write("New scale not specified. Exiting.\n")
    sys.exit()
sys.stdout.write("Options specified:\n")
sys.stdout.write("  New scale: %s\n" % opt.new_pixel_width)
if opt.allfiles:
    sys.stdout.write("  Replace scale in all files: yes\n")
else:
    sys.stdout.write("  Replace scale in files containing this scale: %s\n"
                     % opt.old_pixel_width)
sys.stdout.write("\n")
fli = getfiles(args)
if fli == []:
    sys.stdout.write("No files.\n")
else: 
    for fn in fli:
        process(fn, opt)
